---
- name: Clone Sentry self-hosted repo
  ansible.builtin.git:
    clone: true
    depth: 1
    dest: "{{ sentry_install_dir }}"
    force: true
    repo: "{{ sentry_git_repo }}"
    version: "{{ sentry_version }}"

- name: Setup sentry config
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ sentry_install_dir }}/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - sentry/config.yml
    - sentry/sentry.conf.py

- name: Setup GeoIP config
  ansible.builtin.template:
    src: "geoip/GeoIP.conf.j2"
    dest: "{{ sentry_install_dir }}/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  when:
    - sentry_geoip_account_id | length > 0
    - sentry_geoip_license_key | length > 0

- name: Setup .env.custom file
  ansible.builtin.template:
    src: ".env.custom.j2"
    dest: "{{ sentry_install_dir }}/.env.custom"
    owner: root
    group: root
    mode: "0644"
  when: sentry_custom_env | length > 0

- name: Run Sentry install script
  ansible.builtin.command: "./install.sh {{ sentry_install_options | join(' ') }}"
  args:
    chdir: "{{ sentry_install_dir }}"
  changed_when: false

- name: Create and start services
  community.docker.docker_compose_v2:
    project_src: "{{ sentry_install_dir }}"
    env_files:
      - "{{ sentry_install_dir }}/.env.custom"
  environment:
    COMPOSE_HTTP_TIMEOUT: "180"

- name: Install backup cron job
  ansible.builtin.cron:
    cron_file: sentry
    job: "cd {{ sentry_install_dir }} && {{ sentry_backup_command }}"
    name: "Backup Sentry"
    special_time: "{{ sentry_backup_frequency }}"
    state: "{{ 'present' if sentry_backup_enabled else 'absent' }}"
    user: root
